/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PersonalPageService } from "../personalPage.service";
import { PersonalPageCreateInput } from "./PersonalPageCreateInput";
import { PersonalPage } from "./PersonalPage";
import { Post } from "../../post/base/Post";
import { PersonalPageFindManyArgs } from "./PersonalPageFindManyArgs";
import { PersonalPageWhereUniqueInput } from "./PersonalPageWhereUniqueInput";
import { PersonalPageUpdateInput } from "./PersonalPageUpdateInput";

export class PersonalPageControllerBase {
  constructor(protected readonly service: PersonalPageService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PersonalPage })
  async createPersonalPage(
    @common.Body() data: PersonalPageCreateInput
  ): Promise<PersonalPage> {
    return await this.service.createPersonalPage({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        profileImage: true,
        bio: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PersonalPage] })
  @ApiNestedQuery(PersonalPageFindManyArgs)
  async personalPages(@common.Req() request: Request): Promise<PersonalPage[]> {
    const args = plainToClass(PersonalPageFindManyArgs, request.query);
    return this.service.personalPages({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        profileImage: true,
        bio: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PersonalPage })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async personalPage(
    @common.Param() params: PersonalPageWhereUniqueInput
  ): Promise<PersonalPage | null> {
    const result = await this.service.personalPage({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        profileImage: true,
        bio: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PersonalPage })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePersonalPage(
    @common.Param() params: PersonalPageWhereUniqueInput,
    @common.Body() data: PersonalPageUpdateInput
  ): Promise<PersonalPage | null> {
    try {
      return await this.service.updatePersonalPage({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          profileImage: true,
          bio: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PersonalPage })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePersonalPage(
    @common.Param() params: PersonalPageWhereUniqueInput
  ): Promise<PersonalPage | null> {
    try {
      return await this.service.deletePersonalPage({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          profileImage: true,
          bio: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
