/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, PersonalPage as PrismaPersonalPage } from "@prisma/client";

export class PersonalPageServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PersonalPageCountArgs, "select">
  ): Promise<number> {
    return this.prisma.personalPage.count(args);
  }

  async personalPages(
    args: Prisma.PersonalPageFindManyArgs
  ): Promise<PrismaPersonalPage[]> {
    return this.prisma.personalPage.findMany(args);
  }
  async personalPage(
    args: Prisma.PersonalPageFindUniqueArgs
  ): Promise<PrismaPersonalPage | null> {
    return this.prisma.personalPage.findUnique(args);
  }
  async createPersonalPage(
    args: Prisma.PersonalPageCreateArgs
  ): Promise<PrismaPersonalPage> {
    return this.prisma.personalPage.create(args);
  }
  async updatePersonalPage(
    args: Prisma.PersonalPageUpdateArgs
  ): Promise<PrismaPersonalPage> {
    return this.prisma.personalPage.update(args);
  }
  async deletePersonalPage(
    args: Prisma.PersonalPageDeleteArgs
  ): Promise<PrismaPersonalPage> {
    return this.prisma.personalPage.delete(args);
  }
}
